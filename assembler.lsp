(defun assemble (program)
  (let ((lbls nil)
        (pc 0)
        (bytecode nil))
    (dolist (inst program)
      (if (symbolp inst)
          (setq lbls (append lbls (list (cons inst pc)))) ;; TODO: check for lables collision
          (setq pc (++ pc))))
    (setq pc 0)
    (dolist (inst program)
      (unless (symbolp inst)
        (let ((new-inst inst)
              (opcode (car inst)))
          (when (or (eq opcode 'jmp)
                    (eq opcode 'jnt)
                    (eq opcode 'call))
            (let ((lbl (cadr inst))
                  (addr 0))
              (dolist (lbl-pair lbls)
                (when (eq (car lbl-pair) lbl)
                  (setq addr (cdr lbl-pair))))
              (when (null addr)
                (error "Unreachable"))
              (setq new-inst `(,(car new-inst) ,(- addr pc)))))
          (setq bytecode (append bytecode `(,new-inst)))
          (setq pc (++ pc)))))
    (let ((bytecode-len 0)
          (bytecode-arr nil))
      (dolist (_ bytecode)
        (setq bytecode-len (++ bytecode-len)))
      (setq bytecode-arr (make-array bytecode-len))
      (let ((i 0))
        (dolist (inst bytecode)
          (seta bytecode-arr i inst)
          (setq i (++ i))))
      bytecode-arr)))
